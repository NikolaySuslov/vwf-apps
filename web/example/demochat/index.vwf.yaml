# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
--- 
properties:
# Heartbeats are used to keep track of when connections to users are lost.
# The heartbeat interval represents how often the view will send a heartbeat to the model
# and it is in milliseconds.
  heartbeatInterval: 2500
# The heartbeat timeout is how recently the model must have heard from the view in order
# to not consider the view disconnected and remove the correlated user. It is measured
# in seconds.
  heartbeatTimeout: 10.0
methods:
# The createUser method is used to create users when loggin in.
  createUser:
events:
# The userCreateFailed event is raised when user creation fails.
# Currently only uniqueness of name is tested, so that is the only
# possible failure cause at present. The return value is the userName
# that failed creation.
  userCreateFailed:
# The userCreated event fires when a new user is created.
# The arguments are the new users nodeId, the display name, the display color, an array of two 
# member arrays with display name/display color pairs of currently existing users in order to
# populate the current user list, and finally the heartbeatInterval.
  userCreated:
# The userRemoved event fires when users are removed, either by manually disconnecting or due
# to their heartbeat timing out. The event has two arguments, the display name and display color.
  userRemoved:
# The userMessage event is posted when a user sends a message to the chat.
  userMessage:
children:
# The users child is used to contain the users that are currently connected.
# It provides a tick function that deals with removing users whose heartbeat
# has timed out, and it provides a testUsername method that tests if a username
# is already in use.
  users:
    extends:  http://vwf.example.com/node.vwf
    methods:
      testUsername:
      tick:
    scripts:
    - |
      this.testUsername = function( userName ) {
        //Loop over children, test if userName is equal to children's
        //names. Return true if there is no match(the name is good),
        //return false if there is a match(the name is invalid).
        var nameGood = true;
        this.children.forEach( function ( entry ) {
          if ( entry.displayName == userName ) {
            nameGood = false;
          }
        } );
        return nameGood;
      };
      this.tick = function( ) {
        // When the model is tick-ed, first set up an array to hold
        // children to be removed, and calculate the current heartbeat
        // cutoff (now - heartbeatTimeout).
        var myParent = this.parent;
        var toRemove = [ ];
        var curTimeCutoff = this.time - this.parent.heartbeatTimeout;
        // Loop over children, testing their latest heartbeat, add to
        // the array of children to be removed if they fail the test.
        this.children.forEach( function ( entry ) {
          if ( entry.lastHeartbeat < curTimeCutoff ) {
            toRemove.push( entry );
          }
        } );
        // Loop over the children identified to be removed, trigger a
        // userRemoved event to inform the various views, then delete
        // the timed out User.
        toRemove.forEach( function ( entry ) {
          myParent.userRemoved( entry.displayName, entry.displayColor );
          vwf.deleteNode( entry.id );
        } );
      };
scripts:
- |
  this.createUser = function( userName, userColor, userSound, viewHandle ) {
    //First, test if the userName is valid.
    if ( this.users.testUsername( userName ) == false ) {
      // Raise event that the username wasn't usable.
      this.userCreateFailed( userName );
    }
    else {
      //If the username is valid, create the new user as a child of users.
      //Provide a callback function that when the user creation is finished,
      //sends an appropriate userCreated event.
      var userDef = { 
        "extends": "demochatuser.vwf",
        "properties": {
          "displayName": userName,
          "viewHandle": viewHandle,
          "displayColor": userColor,
          "alertSound": userSound,
          "lastHeartbeat": this.time
        },
        "children": { } 
      };
      this.users.children.create( userName, userDef, function( node ) {
        var userList = [ ];
        node.parent.children.forEach( function( entry ) {
          userList.push( [ entry.displayName, entry.displayColor ] );
        } );
        this.parent.userCreated( node.id, node.displayName, node.displayColor, userList, node.parent.parent.heartbeatInterval );
      } );
    }
  } //@ sourceURL=index.vwf