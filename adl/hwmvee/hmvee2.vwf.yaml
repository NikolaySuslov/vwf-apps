# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
---

extends: http://vwf.example.com/node3.vwf
source: matv01_veh.dae
type: model/vnd.collada+xml
properties:
  rotation: [ 1, 0, 0, 90 ]
  scale: [ 100, 100, 100]
  pin-rate: 1
  spin-axis: [ 0, 0, 1 ]
  RotationAmt:
  Controlled:
  steerAmt:
    set: |
           this.steerAmt = value;
           this.steerAmt = Math.min(.7,Math.max(-.7,value));
           this.tireRF.setRotMatrix(this.BuildSteerMatrix());
           this.tireLF.setRotMatrix(this.BuildSteerMatrix());
  wheelRotate:
    set: |
            this.wheelRotate = value;
            this.wheelRotMatrix	= this.BuildSteerMatrix();		
            this.tireRF.setRotMatrix(this.wheelRotMatrix);
            this.tireLF.setRotMatrix(this.wheelRotMatrix);	
            this.tireRB.setRotX(this.wheelRotate);	
            this.tireLB.setRotX(this.wheelRotate);				
scripts: 
- |
         function findChildColladaNode(node, name)
         {
            
            if(node.colladaId == name)
                return node;
            else if(node.children){
                for(var i = 0; i < node.children.length; i++) {
                    var child = findChildColladaNode(node.children[i],name);
                    if(child) return child;
                }
            }
            return null;
         }
         function findChildViewNode(node, name)
         {
            
            if(node.vwfID == name)
                return node;
            else if(node.children){
                for(var i = 0; i < node.children.length; i++) {
                    var child = findChildViewNode(node.children[i],name);
                    if(child) return child;
                }
            }
            return null;
         }
         function recurseshow(obj, depth)
         {
             if(!obj) return null;		 
             if(depth > 1) return null;
             depth++;
             var keys = {};
             if(obj.__proto__) keys['proto'] = recurseshow(obj.__proto__,depth);
             for (var key in obj) if(key != 'parent' && key != 'vertices'){
                if(obj[key] && obj[key].constructor === String) keys[key] = obj[key];
                else keys[key] = recurseshow(obj[key],depth) ;
             }
             return keys;
         }
         function debugshow(obj)
         {
            var keys = recurseshow(obj,0);
        
            var data = "data:application/json;UTF8," + (JSON.stringify(keys));
           // data = "data:application/json;UTF8," + (JSON.stringify(obj));
            window.open(data);	 
         }
         function findscene()
         {
             for(var i =0; i<vwf.views.length;i++)
             {
                 if(vwf.views[i].module.id = 'vwf/view/glge') return vwf.views[i].state.scenes["index-vwf"].glgeScene;
                 return null;
             }
         }
         this.BuildSteerMatrix = function()
         {
             var steermat = GLGE.angleAxis(this.steerAmt,[0,0,1]);		  
             var sidevec =  GLGE.mulMat4Vec3(steermat,[1,0,0]);
             var spinmat =  GLGE.angleAxis(this.wheelRotate,sidevec);
             return GLGE.mulMat4(spinmat,steermat);
         }
         
         this.initialize = function() {
            document["HWMVEE"] = this;
            
            var root = findChildViewNode(findscene(),this.id);
            //debugshow(root);
           
            this.tireRF = findChildColladaNode(root,'passenger_side_front_wheel');
            this.tireRB = findChildColladaNode(root,'passenger_side_back_wheel');
            this.tireLF = findChildColladaNode(root,'driver_side_front_wheel');
            this.tireLB = findChildColladaNode(root,'driver_side_back_wheel');
 
            this.steerAmt = 1.0;
            this.wheelRotate = 0.0;
            this.RotationAmt = 0.0;
            this.GetSteer = function(){return this.steerAmt;}
            this.wheelRotMatrix = [];
            this.WDown = false;
            this.SDown = false;
            this.DDown = false;
            this.ADown = false;
            this.Momentum = 0.0;
            //alert("got here");
            //tireRF.setRotZ(tireRF.getRotZ() + .1);
            this.Controlled = false;
            this.AmFirstClient();
            
            
         }
         this.turn = function(dir)
         {
            var t = that.RotationAmt + dir * this.steerAmt/16.0 * -.1 * this.Momentum;
            vwf_view.kernel.setProperty(that.id, "RotationAmt", t);
         }
         this.BuildHullRotation = function()
         {
             
             var current = goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
             goog.vec.Quaternion.fromAngleAxis(90 * 0.0174532925,[1,0,0], current);
             var turn = goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
             goog.vec.Quaternion.fromAngleAxis(this.RotationAmt,[0,0,1], turn);
             
             
             var totalquat = goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
             goog.vec.Quaternion.concat(turn,current, totalquat)
             var axis = [0,0,0];
             var angle = 0;
             angle = goog.vec.Quaternion.toAngleAxis(totalquat,axis);
             vwf_view.kernel.setProperty(this.id, 'rotation' , [axis[0],axis[1],axis[2],angle/0.0174532925]);
         
         }
         this.keydown = function(e){
           
             if(e.keyCode == 65) this.ADown = true;
             if(e.keyCode == 68) this.DDown = true;
             if(e.keyCode == 87) this.SDown = true;	  
             if(e.keyCode == 83)this.WDown = true; 
         }
         this.keyup = function(e){
             
             if(e.keyCode == 65) this.ADown = false;
             if(e.keyCode == 68) this.DDown = false;
             if(e.keyCode == 87) this.SDown = false;	  
             if(e.keyCode == 83)this.WDown = false; 
         }
         this.update = function(time){
            vwf_view.kernel.setProperty(this.id, "steerAmt", this.steerAmt *.993);
             this.Momentum *= .993;
             if(this.ADown == true) vwf_view.kernel.setProperty(this.id, "steerAmt", this.steerAmt +.03);
             if(this.DDown == true) vwf_view.kernel.setProperty(this.id, "steerAmt", this.steerAmt -.03);
             
             if(this.SDown == true) this.Momentum -= .2;
             if(this.WDown == true) this.Momentum += .2;
             
             if(this.Momentum  < 0) {
                  vwf_view.kernel.setProperty(this.id, 'wheelRotate',this.wheelRotate +.01 * this.Momentum);
                  var front = GLGE.mulMat4Vec3(GLGE.angleAxis(this.RotationAmt,[0,0,1]),[0,-this.Momentum,0]);
                  vwf_view.kernel.setProperty(this.id, 'translation' , [this.translation[0] + front[0],this.translation[1] + front[1],this.translation[2] + front[2]]);
                  this.turn(1);
                  this.BuildHullRotation();
             }				  
             if(this.Momentum  > 0){
                  vwf_view.kernel.setProperty(this.id, 'wheelRotate',this.wheelRotate +.01* this.Momentum);
                  var front = GLGE.mulMat4Vec3(GLGE.angleAxis(this.RotationAmt,[0,0,1]),[0,-this.Momentum,0]);
                  vwf_view.kernel.setProperty(this.id, 'translation' , [this.translation[0] + front[0],this.translation[1] + front[1],this.translation[2] + front[2]]);
                  this.turn(1);
                  this.BuildHullRotation();
             }  
            
             var div = document.getElementById('testdiv');
             var pos = this.translation;
             pos = [pos[0],pos[1],pos[2]+300,1];
             div.style.top = ((pos[0]/100) + 100) +'px';
             var viewprojection = vwf.views[0].state.cameraInUse.getViewProjection();
             var screen = GLGE.mulMat4Vec4(viewprojection,pos);
             screen[0] /= screen[3];
             screen[1] /= screen[3];
             screen[2] /= screen[3];
             screen[0] /= 2;
             screen[1] /= 2;
             screen[2] /= 2;
             screen[0] += .5;
             screen[1] += .5;
             screen[2] += .5;
          
             screen[0] *= window.innerWidth;
             screen[1] *= window.innerHeight;
             screen[2] *= window.innerHeight;
             
             screen[1] = window.innerHeight - screen[1];
             
              
             div.style.left = screen[0]  +'px';
             div.style.top = screen[1]  +  'px';
              
              var camera = vwf.views[0].state.cameraInUse;
              camera.setLocZ(300);
              camera.Lookat([this.translation[0],this.translation[1],this.translation[2]+200]);
              
              
              
         }
         
         this.animate = function(time) {
                  that.update(time);
                  that.requestId = window.requestAnimFrame(that.animate);
         }
         this.start = function () {
                  this.requestId = window.requestAnimFrame(this.animate);
         }
         this.stop = function () {
                  if (requestId)
                       window.cancelAnimationFrame(this.requestId);
                  this.requestId = 0;
         }
         window.requestAnimFrame = function(){
                if(window.requestAnimationFrame)
                    return window.requestAnimationFrame;
                if(window.webkitRequestAnimationFrame)   
                    return window.webkitRequestAnimationFrame; 
                if(window.mozRequestAnimationFrame)
                    return window.mozRequestAnimationFrame;
                if(window.oRequestAnimationFrame)
                    return window.oRequestAnimationFrame;
                if(window.msRequestAnimationFrame)
                    return window.msRequestAnimationFrame;
                return (function(callback){window.setTimeout(callback, 1000 / 60);});
         }();
         this.AmFirstClient = function()
         {
           
            var clientcount = 0;
            var app = window.location.pathname;
            var match;
            var that = this;
            jQuery.getJSON( "/" + app.substring(1, app.indexOf('/', 1)) + "/admin/instances", function( data ) {
                  
              
                  
                  var clients = [];
                  for(var prop in data)
                  {
                    for(var prop2 in data[prop].clients)
                        {
                            
                            clients.push(prop2);
                        }
                  }
                
                  if(clients.length == 2)
                  {
                    document["MY_HMVEE"] = that;
                    $(document).keydown(function(e){  document["MY_HMVEE"].keydown(e);});
                    $(document).keyup(function(e){document["MY_HMVEE"].keyup(e);});
                    
                    
                    
                     var newdiv = document.createElement('div');
                     newdiv.style.position = 'absolute';
                     newdiv.id = 'testdiv';
                     newdiv.innerHTML = document["MY_HMVEE"].id;
                     newdiv.style.left = '0px';
                     newdiv.style.top = '0px';
                     document.body.appendChild(newdiv);
                    
                    document["MY_HMVEE"].start();
                  }
            } ); 
           if(clientcount == 1)
             return true;
           else 
             return false;
         };
         var that = this;
       
         
         var newdiv = document.createElement('div');
         newdiv.style.position = 'absolute';
         newdiv.id = 'testdiv';
         newdiv.innerHTML = this.id;
         newdiv.style.left = '0px';
         newdiv.style.top = '0px';
         document.body.appendChild(newdiv);