# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#
#
# The solitaire_game represents an activity in the marbles application.
# Activities are any interactable activity in the marbles gamespace. They generally are directly 
# interfaced with by the user model.  While a user is 'attached' to an activity, the various
# user input from its view is directed via the correlated user node to the activity, so as to
# keep track of which user is responsible for what action.
# The solitaire_game activity is a table with a board on it for playing the 'solitaire' marbles
# game (in which one attempts to jump marbles to remove other marbles, with the goal of removing
# all but one marble from the board).
# The solitaire_game is limited to one player at a time (it is solitaire, after all).

--- 
extends: http://vwf.example.com/node3.vwf
properties:
#The gameOccupiedBy property is used to track what user is currently using a particular
# solitaire game.
  gameOccupiedBy: ""
#The gameUnderway property is used to track whether a game is currently underway.
  gameUnderway: false
#The selectedMarble property is used to track what, if any, marble is currently selected.
  selectedMarble: ""
methods:
#The first four methods are default methods all activities should implement, and handle when
#the user forwards the appropriate event to the activity model for handling.
#The parameters are nodeId, and eventParameters (which are passed through from the normal
# keyDown/keyUp/pointerDown/pointerUp events) followed by a user parameter (the actual user
# object for the user that the event originated from).
  handleKeyDown:
  handleKeyUp:
  handlePointerDown:
  handlePointerUp:
# The activitySelected method should takes the same three arguments as the previous
# handle methods. It is called when a user that is not currently engaged in an activity
# generates a pointerUp event. The user expects a boolean return value. If true is returned
# the user will attempt to attach to and perform this activity. 
  activitySelected:
# The attachUser method is invoked with a single argument, the user that is to be attached.
# If it is valid for the user to begin the activity, it is the attachUser method's responsibility
# to update the user.attachedTo parameter to be set to this activities nodeId. This function should
# handle all appropriate 'a user just joined this activity' functions (such as adjusting the users
# viewpoint to the initial viewpoint location, for example).
  attachUser:
# The detachUser method is invoked with a single argument, the user that is to be detached.
# If it is valid for the user to cease the activity, it is the detachUser method's responsibility
# to update the user.attachedTo parameter to be set to an empty string. This function should
# handle all appropriate 'a user just left this activity' functions (such as adjusting the users
# viewpoint to a 'looking away' viewpoint location, for example).
  detachUser:
# The checkGame method tests the current game status, to see if the game has been won (only one
# marble left), or is in a complete dead end (no more moves possible, but more than one marble
# left). If either of those situations is found, a message is sent to the user. The method takes
# a single argument, the user object of the user currently attached to the game.
  checkGame:
# The solitaireNewGame method starts a new game. It takes no arguments.
  solitaireNewGame:
# The solitaireEndGame method ends the current game, and 'puts the marbles away' (moves them
# instantly to a non-visible location).
  solitaireEndGame:
# The createMarbles method tests if the marbles already exist. If they do not, then they are
# created. They are created in their default 'off of the board' location.
  createMarbles:
events:
  # The solitaireUserJoined and solitaireUserLeft events are triggered when a user joins or
  # leaves the solitaire game. They are used to trigger the solitaire panel being shown/hidden
  # for the user that joined/left. Both have a single argument, the viewHandle aka,
  # the vwf_view.kernel.moniker for the view of the correlated user.
  solitaireUserJoined:
  solitaireUserLeft:
  # The solitaireUserMessage event is used to send messages to the user playing the solitaire
  # game. The event has two parameters, the viewHandle mentioned immediately above, as well 
  # as the message to be displayed.
  solitaireUserMessage:
scripts:
 - |
  //When initialized, create marbles.
  this.initialize = function( ) {
    this.createMarbles( );
  };

   // Store initial viewpoint as well as the exiting viewpoint.
   // These are currently world transforms... Need to be updated.
   var solitairePlayingViewPoint = [ 1.0000032186508179, 0, 0, 0, 0, 0.5591943860054016, -0.8290396928787231, 0, 0, 0.8290374279022217, 0.5591927766799927, 0 , 4.2, 2.2, 1.5,1 ];
   var solitaireExitingViewPoint = [ 1.0000032186508179, 0, 0, 0, 0, 0.5591943860054016, -0.8290396928787231, 0, 0, 0.8290374279022217, 0.5591927766799927, 0 , 4.2, 2.2, 1.5,1 ];

  // Define a patterns array that holds the names of the different marble pattern types.
  var patterns = [ "blueberryfreeze", "dragonfly", "iguana", "jungle", "milkyway", "mummy", "octopus", "rooster", "sun" ];


  //Method to start a new solitaire game.
  // First, set the gameUnderway to false (so marble movement is instant and not animated)
  // Then, loop over the board positions. If it's a valid board position, move a marble to that position.
  // Make certain the marbles are deselected, as you move them.
  // Finally, set the selectedMarble to empty string(which should be redundant, but better safe than sorry)
  // and set the gameUnderway to true.
  this.solitaireNewGame = function( ) {
    var me = this;
    var childrenIndex = 0;
    me.gameUnderway = false;
    for ( var xIndex = 0; xIndex < 7; xIndex++ ) {
      for ( var yIndex = 0; yIndex < 7; yIndex++ ) {
        if ( ( this.children[ childrenIndex ].positionOnBoard( [ xIndex, yIndex ] ) ) && !( ( xIndex == 3 ) && ( yIndex == 3 ) ) ) {
          this.children[ childrenIndex ].solitairePosition = [ xIndex, yIndex ];
          this.children[ childrenIndex ].selected = false;
          childrenIndex++;
          if ( childrenIndex > 31 ) {
            xIndex = 7;
            yIndex = 7;
          }
        }
      };
    };   
    me.selectedMarble = "";
    me.gameUnderway = true; 
  };
  
  //Method to end a solitaire game.
  //Set gameUnderway to false.  Move all marbles to the 'off board' position of 0,0, and deselect them.
  //Set selected marble to empty string, just in case.
  this.solitaireEndGame = function( ) {
    var me = this;
    me.gameUnderway = false;
    for ( var childrenIndex = 0; childrenIndex < 32; childrenIndex++ ) {
      this.children[ childrenIndex ].solitairePosition = [ 0, 0 ];
      this.children[ childrenIndex ].selected = false;
    };
    me.selectedMarble = "";
  };

  //Method to create marbles.
  // If the marbles have not yet been created, loop and create them.
  this.createMarbles = function( ) {
    if ( this.children.length == 0 ) {
      var myNode = this;
      var patternIndex = 0;
      for ( var patternIndex = 0; patternIndex < 32; patternIndex++ ) {
        var newMarbleName = "solitaireMarble" + patternIndex;
        var solitaireMarbleTemplate = { 
          "source": "models/" + patterns[ patternIndex % 9 ] + "marble_shooter.DAE", 
          "extends": "solitaire_marble.vwf",
          "type": "model/vnd.collada+xml",
          "properties": { 
            "selected": false,
            "private": null
            }
        };

        myNode.children.create( newMarbleName, solitaireMarbleTemplate, function( newObj ) {
          newObj.moveMarbleInstantly( );
        } );
      };
    }
  };

  //When detaching a user, change the viewpoint of the user. Then set the users attachedTo to an
  // empty string, as well as setting this solitaire games gameOccupiedBy to an empty string.
  // Fire the solitaireUserLeft event so that the users view will hide the solitaire panel.
  this.detachUser = function( user ) {
    if ( this.gameOccupiedBy == user.id ) {
      var userViewpoint = solitaireExitingViewPoint; //goog.vec.Mat4.multMat( this.transform, solitaireExitingViewPoint, goog.vec.Mat4.create( ) );
      user.transformTo( userViewpoint, 3 );
      user.attachedTo = "";
      this.gameOccupiedBy = "";
      this.solitaireUserLeft( user.viewHandle );
    }
  };

  //When attaching a user, first test if this solitaire game is already occupied, if it is
  // ignore the attempt, otherwise change the viewpoint of the user. Then set the users 
  // attachedTo to an the games node ID, as well as setting this solitaire games 
  // gameOccupiedBy to the users node ID.
  // Fire the solitaireUserJoined event so that the users view will show the solitaire panel.
  this.attachUser = function( user ) {
    if ( this.gameOccupiedBy == "" ) {
      this.gameOccupiedBy = user.id;
      var userViewpoint = solitairePlayingViewPoint; //goog.vec.Mat4.multMat( this.transform, solitairePlayingViewPoint, goog.vec.Mat4.create( ) );
      user.transformTo( userViewpoint, 3 );
      user.attachedTo = this.id;
      this.solitaireUserJoined( user.viewHandle );     
    }
  };

  // Since only one user can play solitaire at once, when testing if a user has selected
  // this activity, first test the solitaire game's gameOccupiedBy.
  this.activitySelected = function( nodeId, eventParameters, user ) {
    var me = this;
    var node = user.getObject( nodeId );
    if ( ( node != undefined ) && ( me.gameOccupiedBy == "" ) ) {
      if ( ( node === me ) || ( node.parent === me ) ) {
        return true;
      }
    }
    return false;
  };

  // There are a few possibilities for clicking interaction with the solitaire
  // game. If the game itself is clicked on, and no game is currently underway
  // start a new game.
  //  If a game is underway, and no marble is currently selected, and the
  // item clicked was a marble, then select that marble.
  // If a game is underway, and there is a marble selected already, and the
  // item clicked was a marble, then have the selected marble attempt to
  // leap the just clicked marble. After a brief delay, check the game's
  // status. (Delay is so animation is mostly complete before message
  // to user is displayed.)
  this.handlePointerDown = function( nodeId, eventParameters, user ) {
    var me = this;
    var node = user.getObject( nodeId );
    if ( node != undefined ) {
      if ( me.gameUnderway == false ) {
        if ( node === me ) {
          me.solitaireNewGame();
        }
      }
      else {
        if ( me.selectedMarble == "" ) {
          if ( node.parent === me ) {
            node.selected = true;
          }
          else {
          }
        }
        else {
          if ( nodeId == me.selectedMarble ) {
            node.selected = false;
          }
          else if ( node.parent === me ) {
            var selectedMarble = user.getObject( me.selectedMarble );
            if ( selectedMarble != undefined ) {
              selectedMarble.leapMarble( node );
              me.future(1.0).checkGame( user );
            }
          }
        }
      }
    }
  };

  this.handlePointerUp = function( nodeId, eventParameters, user ) {
  };

  this.handleKeyDown = function( nodeId, eventParameters, user ) {
  };

  //When the user presses the escape buton, detach the user.
  this.handleKeyUp = function( nodeId, eventParameters, user ) {
    if( eventParameters[ 0 ][ 'keysUp' ][ 'escape' ] )
    {
      this.detachUser( user );
    }
  };

  //Method to check the game (see if it's won, or impossible to make further moves.)
  // First, double check that the game is underway.
  // After that, form an array of all marbles currently on the board.
  // If only one marble is on the board, the user has won, inform them and we're done.
  // If more than one is on the board, then run two loops over the remaining marbles.
  // For any two marbles, check if they can jump each other.
  // If they can, note it and exit the loops.
  // If after all the looping, nothing can jump, inform the user.
  this.checkGame = function( user ) {
    var me = this;
    if ( me.gameUnderway == true ) {
      var marblesOnBoard = [ ];
      for ( var childIndex = 0; childIndex < me.children.length; childIndex++ ) {
        if ( me.children[ childIndex ].onBoard() == true ) {
          marblesOnBoard.push( me.children[ childIndex ] );
        }
      }
      if ( marblesOnBoard.length == 1 ) {
        me.solitaireUserMessage( user.viewHandle, "Congratulations, " + user.userName + ", you won!" );
      }
      else {
        var validMoveLeft = false;
        for ( var marblesLeftOuterIndex = marblesOnBoard.length - 1; marblesLeftOuterIndex > -1; marblesLeftOuterIndex-- ) {
          for ( var marblesLeftInnerIndex = marblesOnBoard.length - 1; marblesLeftInnerIndex > -1; marblesLeftInnerIndex-- ) {
            if ( ( marblesLeftOuterIndex != marblesLeftInnerIndex ) && ( marblesOnBoard[ marblesLeftOuterIndex ].canLeap( marblesOnBoard[ marblesLeftInnerIndex ] ) ) ) {
              marblesLeftOuterIndex = -1;
              marblesLeftInnerIndex = -1;
              validMoveLeft = true;
            }
          }
        }
        if ( validMoveLeft == false ) {
          me.solitaireUserMessage( user.viewHandle, user.userName + ", there are no valid moves left." );
        }
      }
    }

  };