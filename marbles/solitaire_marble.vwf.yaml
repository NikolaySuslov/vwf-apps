# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#
#
#  This prototype defines marbles for the solitaire game.
#  A significant portion of the game logic has been placed in the actual marbles.
#  They are responsible for translating between 'board positions' and actual coordinates,
#  updating and moving their world positions when the board position is changed. They provide
#  functions for testing if a position is on the board or not, whether one marble can leap another,
#  and utility functions for looking up a marble based on its board position.

--- 
extends: http://vwf.example.com/node3.vwf
properties:
#The selected property determines whether or not a specific marble is selected.
# The set function handles updating the parent solitaire game if available, animating
# or simply immediately moving the marble to the appropriate new location if there was
# a change.
  selected:
    set: | # Set whether the marble is selected.
      var moveInstant = false;
      var valueChanged = false;
      // If there is no parent game, just move instantly, and set selected to false.
      // Makes no sense to have a solitaire marble not in a solitaire game.
      if ( this.parent == undefined ) {
        moveInstant = true;
        if ( this.selected != false ) {
          valueChanged = true;
        }
        this.selected = false;
      }
      else if ( ( this.parent.selectedMarble == "" ) || ( !( ( this.parent.selectedMarble != this.id ) && ( value == true ) ) ) ) {
        // If the game has no selected marble, or if there is a selected marble then so long as we're setting the value to false or the
        // selected marble is this marble...


        // If the game is not underway, we always move instantly.
        if ( this.parent.gameUnderway == false ) {
          moveInstant = true;
        }

        // If we're dealing with moving to an undefined, or off board, position, then move instantly.
        if ( ( this.solitairePosition != undefined ) && ( ( this.solitairePosition[ 0 ] == 0 ) && ( this.solitairePosition[ 1 ] == 0 ) ) ) {
          moveInstant = true;
        }

        //Test if the value has changed.
        if ( this.selected != value ) {
          valueChanged = true;

          // If the value has changed, then we'll need to update the game's selected marble.
          if ( value == true ) {
            this.parent.selectedMarble = this.id;
          }
          else {
            this.parent.selectedMarble = "";
          }
        }
        this.selected = value;     
      }

      //If the value changed, move the marble (animate or not based on moveInstant)
      if ( valueChanged == true ) {
        if ( moveInstant ) { 
          this.moveMarbleInstantly();
        }
        else {
          this.moveMarble();
        }
      }
    get: | # Get whether the marble is selected.
      return this.selected;
    value: # Initial default value.
      false
  solitairePosition:
    set: | # Set the grid position.
      //  First test if either position is off of the board. If so, move instantly.
      var moveInstant = this.eitherOffBoard(  value, this.solitairePosition );
      //  Double check, if no game is underway, we move instantly.
      if ( ( this.parent == undefined ) || ( this.parent.gameUnderway == false ) ) {
        moveInstant = true;
      }
      // Actually update the position.
      this.solitairePosition = value;
      // Finally, move the marble based on the new position.
      if ( moveInstant ) { 
        this.moveMarbleInstantly();
      }
      else {
        this.moveMarble(); 
      }
    get: | # Get the grid position.
      return this.solitairePosition;
    value: # Initial default value.
      [ 0, 0 ]
methods:
# The leapMarble method takes a single argument, the marble to attempt to leap.
  leapMarble:
# The moveMarble function moves the marble to a new location based on its
# grid position (solitairePosition). The movement is done animated over time.
  moveMarble:
# The moveMarbleInstantly function moves the marble to a new location based on
# its grid position (solitairePosition). The move is instant.
  moveMarbleInstantly:
# The onBoard method returns a boolean, based on whether the marbles 
# solitairePosition is on the board or not.
  onBoard:
# The can leap method takes another marble as an argument and returns true
# or false depending on if this marble can leap the other.
  canLeap:
# The positionOnBoard method takes a X,Y integer 'board grid coordinate' and
# returns true or false based on whether the passed in coordinate would be on
# the board.
  positionOnBoard:
scripts:
 - |
  // Implement a lookupMarble helper function to look up a marble based on its grid position.
  this.lookupMarble = function( game, gridPosition ) {
    var foundMarble = undefined;
    for( var childIndex = 0; childIndex < game.children.length; childIndex++ ) {
      if ( ( gridPosition[ 0 ] == game.children[ childIndex ].solitairePosition[ 0 ] ) && ( gridPosition[ 1 ] == game.children[ childIndex ].solitairePosition[ 1 ] ) ) {
        foundMarble = game.children[ childIndex ];
        childIndex = game.children.length;
      }
    }
    return foundMarble;
  };

  // Implement the positionOnBoard method. Check that the position is actually passed..
  // Check that the points are within bounds.
  // Finally check that it's not within the four cutout 'corners'
  this.positionOnBoard = function ( position ) {
    if ( position != undefined ) { 
      if ( ( position[ 0 ] > -1 ) && ( position[ 0 ] < 7 ) && ( position[ 1 ] > -1 ) && ( position[ 1 ] < 7 ) ) {
        if ( ( ( position[ 0 ] > 1 ) && ( position[ 0 ] < 5 ) ) || ( ( position[ 1 ] > 1 ) && ( position[ 1 ] < 5 ) ) ) {
          return true;
        }
      }
    }
    return false;
  };

  // Implement the onBoard method, by way of calling the positionOnBoard method.
  this.onBoard = function( ) {
    return this.positionOnBoard( this.solitairePosition );
  };

  // Implement the canLeap method.
  this.canLeap = function( toLeap ) {
    var me = this;
    // Verify that we have a position, the toLeap marble exists, and has a position.
    if ( ( me.solitairePosition != undefined ) && ( toLeap != undefined ) && ( toLeap.solitairePosition != undefined ) ) {
      // Get the distance between me and the marble I'm trying to leap.
      var xDiff = toLeap.solitairePosition[ 0 ] - me.solitairePosition[ 0 ];
      var yDiff = toLeap.solitairePosition[ 1 ] - me.solitairePosition[ 1 ];
      //Double check that we are only one space away.
      if ( ( ( Math.abs(xDiff) == 1 ) &&  ( yDiff == 0 ) ) || ( ( xDiff == 0 ) &&  ( Math.abs(yDiff) == 1 ) ) ) {
        // Calculate where we would wind up if we do leap...
        var potentialNewPosition = [ me.solitairePosition[ 0 ] + ( 2 * xDiff ), me.solitairePosition[ 1 ] + ( 2 * yDiff ) ];
        // If the new position is on the board, and there is no marble already at the position, then we can leap.
        if ( ( this.positionOnBoard( potentialNewPosition ) == true ) && (  me.lookupMarble( me.parent, potentialNewPosition ) == undefined ) ) {
          return true;
        }
      }
    }
    return false;
  };

  // Implement a helper function that translates a grid position and selected boolean
  // and returns an x/y/z translation.
  this.marblePosition = function( gridPosition, selected ) {
    var posResult = [0, 0, 0];
    if ( ( gridPosition == undefined ) || ( ( gridPosition[ 0 ] == 0 ) && ( gridPosition[ 1 ] == 0 ) ) ) {
      posResult[ 2 ] = -5;
    }
    else {
      switch ( gridPosition[ 0 ] ) {
        case 0:
          posResult[ 0 ] = -0.171428;
          break;
        case 1:
          posResult[ 0 ] = -0.114286;
          break;
        case 2:
          posResult[ 0 ] = -0.057144;
          break;
        case 3:
          posResult[ 0 ] = 0.0;
          break;
        case 4:
          posResult[ 0 ] = 0.057143;
          break;
        case 5:
          posResult[ 0 ] = 0.114285;
          break;
        case 6:
          posResult[ 0 ] = 0.171427;
          break;
        default:
          posResult[ 0 ] = 0.0;
      };

      switch ( gridPosition[ 1 ] ) {
        case 0:
          posResult[ 1 ] = -0.162893;
          break;
        case 1:
          posResult[ 1 ] = -0.109332;
          break;
        case 2:
          posResult[ 1 ] = -0.054291;
          break;
        case 3:
          posResult[ 1 ] = 0.0;
          break;
        case 4:
          posResult[ 1 ] = 0.052844;
          break;
        case 5:
          posResult[ 1 ] = 0.104956;
          break;
        case 6:
          posResult[ 1 ] = 0.158517;
          break;
        default:
          posResult[ 1 ] = 0.0;
      };

      if ( selected == true ) {
        posResult[ 2 ] = 0.908818;
      }
      else {
        posResult[ 2 ] = 0.838818;
      }
    }

    return posResult;
  };


  // Implement helper to test if either of two positions is not on the board.
  this.eitherOffBoard = function(  newPosition, initialPosition ) {
    if ( ( !( this.positionOnBoard( newPosition ) ) ) || ( !( this.positionOnBoard( initialPosition ) ) ) ) {
      return true;
    }
    return false;
  };

  // Implement the leapMarble method.
  this.leapMarble = function( toLeap ) {
    var me = this;
    // Verify that we have a position, the toLeap marble exists, and has a position.
    if ( ( me.solitairePosition != undefined ) && ( toLeap != undefined ) && ( toLeap.solitairePosition != undefined ) ) {
      // Get the distance between me and the marble I'm trying to leap.
      var xDiff = toLeap.solitairePosition[ 0 ] - me.solitairePosition[ 0 ];
      var yDiff = toLeap.solitairePosition[ 1 ] - me.solitairePosition[ 1 ];
      //Double check that we are only one space away.
      if ( ( ( Math.abs(xDiff) == 1 ) &&  ( yDiff == 0 ) ) || ( ( xDiff == 0 ) &&  ( Math.abs(yDiff) == 1 ) ) ) {
        // Calculate where we would wind up if we do leap...
        var potentialNewPosition = [ me.solitairePosition[ 0 ] + ( 2 * xDiff ), me.solitairePosition[ 1 ] + ( 2 * yDiff ) ];
        // If the new position is on the board, and there is no marble already at the position, then we can leap.
        if ( ( this.positionOnBoard( potentialNewPosition ) == true ) && (  me.lookupMarble( me.parent, potentialNewPosition ) == undefined ) ) {
          toLeap.solitairePosition = [ 0, 0 ];
          me.solitairePosition = potentialNewPosition;
          me.future(1.0).selected = false;
        }
      }
    }
  };

  this.moveMarble = function( ) {
    this.translateTo( this.marblePosition( this.solitairePosition, this.selected ), 1 );
  };

  this.moveMarbleInstantly = function( ) {
    this.translation = this.marblePosition( this.solitairePosition, this.selected );
  };