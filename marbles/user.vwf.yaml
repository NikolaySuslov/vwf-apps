# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#
#
# The user models are used to keep track of various users of an instance of the marbles application.
# The application is designed such that the user model serves as an interface between the individual
# users view and the rest of the models in the application. 

--- 
extends: http://vwf.example.com/camera.vwf
properties:
# The userName property stores the user name, currently uniqueness is not guaranteed.
  userName:
    set: | # Set what the username is 
      if ( ( value != undefined ) && ( value != "" ) && ( ( this.attachedTo == undefined ) || ( this.attachedTo == "" ) ) ) {
        this.navmode = "fly";
      }
      else {
        this.navmode = "none";
      }
      this.userName = value;
    get: | # Get what the user is attached to.
      return this.userName;
    value: ""
  # The attachedTo property keeps track of what, if any, activity the user is currently taking
# part in. An empty string means no activity, and the user is simply navigating the marbles gamespace.
  attachedTo: 
    set: | # Set what the user is attached to.
      if ( ( value != "" ) || ( this.userName == undefined ) || ( this.userName == "" ) ) {
        this.navmode = "none";
      }
      else {
        this.navmode = "fly";
      }
      this.attachedTo = value;
    get: | # Get what the user is attached to.
      return this.attachedTo;
    value: ""
# SelectedMarbles are the current stand in for how a users selected marbles for games are stored in
# the user model. This will need to be updated and refined once activities that employ 'user owned'
# marbles are implemented, and the design needs for the marbles can be better defined.
  selectedMarbles: undefined
methods:
# The four 'handle' methods are called by the correlated view when the appropriate event is raised.
# The events will either be handled directly by the user itself, or if the user is currently 
# attached to an activity, the events will be passed along to the activity.
  handleKeyDown:
  handleKeyUp:
  handlePointerDown:
  handlePointerUp:
# The user model currently maintains an object lookup map, to map between nodeId's and objects, strictly
# for use on the model side of the application. This should probably get moved to an independent prototype
# at some point...
  initializeObjectLookup:
# The callActivityMethod method is an interface that allows the view to call activity methods by way of the
# correlated user.
  callActivityMethod:
  sendMessage:
events:
  messageToPost:
scripts:
- |
  var objectLookup = {};   // objectLookup is created for storing nodeId to object lookup map.


  // rootNode is used to store the root node of the entire tree, for purposes of
  // later updated to the objectLookup map.
  var rootNode;
   
  // Helper function for looking up the object from a nodeId.
  // Return the entry in the map with that nodeId if it is present.
  // If not, reload the object lookup map, and return what is there (even if undefined).
  this.getObject = function( nodeId ) {
    if ( objectLookup[ nodeId ] ) {
      return objectLookup[ nodeId ];
    }
    objectLookup = {};
    objectLookup[ rootNode.id ] = rootNode;
    this.objectLookupHelper( objectLookup, rootNode );
    return objectLookup[ nodeId ];
  };

  this.sendMessage = function( title, message ) {
    this.messageToPost( title, message );
  };
  
  // Helper function for loading the objectLookup map. Recursively go through children, adding them
  // to the map.
  this.objectLookupHelper = function( objectLookupMap, currentObject ) {
    for (var index = 0; index < currentObject.children.length; index++) {
      objectLookupMap[ currentObject.children[ index ].id ] = currentObject.children[ index ];
      if ( currentObject.children[ index ].children.length > 0 ) {
        this.objectLookupHelper( objectLookupMap, currentObject.children[ index ] );
      }
    };
  };

  // Initialize the objectLookup map, and setup the rootNode variable.
  this.initializeObjectLookup = function() {
    rootNode = this.parent;
    objectLookup = {};
    objectLookup[ rootNode.id ] = rootNode;
    this.objectLookupHelper( objectLookup, rootNode );
  };


  // Initialize the user. Set the camera position to the default camera starting position.
  this.initialize = function() {
    this.worldTransform = [ 0.8911424279212952,0.45373648405075073,0,0,-0.45373648405075073,0.8911424279212952,0,0,0,0,1,0,-2.976532459259033,2.7006890773773193,0.6,1];
  };


  // the handleKeyDown method. Do nothing if I'm not involved in an activity.
  // If involved in an activity, pass arguments as well as me on to the activity.
  this.handleKeyDown = function( nodeId, eventParameters ) {
    var me = this;
    if( me.attachedTo == "" ) {
    }
    else {
      var attachedObject = me.getObject( me.attachedTo );
      if ( attachedObject != undefined ) {
        if ( attachedObject.handleKeyDown != undefined ) {
          attachedObject.handleKeyDown( nodeId, eventParameters, me );
        }
      }
    }
  };


  // the handleKeyUp method. If I'm not involved in an activity, perform a
  // very rudimentary stand-in camera movement (needs to be replaced)
  // If involved in an activity, pass arguments as well as me on to the activity.
  this.handleKeyUp = function( nodeId, eventParameters ) {
    var me = this;
    if( me.attachedTo == "" ) {
    }
    else {
      var attachedObject = me.getObject( me.attachedTo );
      if ( attachedObject != undefined ) {
        if ( attachedObject.handleKeyUp != undefined ) {
          attachedObject.handleKeyUp( nodeId, eventParameters, me );
        }
      }
    }
  };

  // the handlePointerDown method. Do nothing if I'm not involved in an activity.
  // If involved in an activity, pass arguments as well as me on to the activity.
  this.handlePointerDown = function( nodeId, eventParameters ) {
    var me = this;
    if( me.attachedTo == "" ) {
    }
    else {
      var attachedObject = me.getObject( me.attachedTo );
      if ( attachedObject != undefined ) {
        if ( attachedObject.handlePointerDown != undefined ) {
          attachedObject.handlePointerDown( nodeId, eventParameters, me );
        }
      }
    }
  };

  // the handlePointerUp method. If I'm not involved in an activity, then loop over
  // activities in the scene, testing activitySelected on each activity. If any
  // pass, then call attachUser on the selected activity, passing in me as the argument.
  // If involved in an activity, pass arguments as well as me on to the activity.
  this.handlePointerUp = function( nodeId, eventParameters ) {
    var me = this;
    if( me.attachedTo == "" ) {
      var foundObject = undefined;
      for( var activityIndex = 0; activityIndex < this.parent.activities.children.length; activityIndex++ ) {
        if ( this.parent.activities.children[ activityIndex ].activitySelected( nodeId, eventParameters, me ) ) {
          foundObject = this.parent.activities.children[ activityIndex ];
          activityIndex = this.parent.activities.children.length;
        }
      }
      if ( foundObject != undefined ) {
        foundObject.attachUser( me );
      }
    }
    else {
      var attachedObject = me.getObject( me.attachedTo );
      if ( attachedObject != undefined ) {
        if ( attachedObject.handlePointerUp != undefined ) {
          attachedObject.handlePointerUp( nodeId, eventParameters, me );
        }
      }
    }
  };

  // The callActivityMethod.
  // Test if I'm actually involved in an activity (can't call the method
  // of the activity I'm attached to if I'm not attached).
  // Test that the activity I'm attached to has the appropriate method.
  // If so, pass along the proper arguments and invoke the method.
  this.callActivityMethod = function ( methodName, methodParameters ) {
    var me = this;
    if ( me.attachedTo != "" ) {
      var attachedObject = me.getObject( me.attachedTo );
      if ( attachedObject != undefined ) {
        if ( attachedObject.methods != undefined ) {
          if ( attachedObject.methods[ methodName ] != undefined ) {
            attachedObject.methods[ methodName ]( me, methodParameters );
          }
        }
      }
    }
  };