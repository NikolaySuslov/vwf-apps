# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/navscene.vwf
properties:
  backgroundColor: [200, 200, 200]
  ambientColor: [200, 200, 200]
methods:
  log:
  toleranceTest:
children:
  grandparent1:
    extends: http://vwf.example.com/node3.vwf
    properties:
      translation: [ 3.097, 7.634, 0.090 ]
      rotation: [ 1, 0, 0, 0 ]
      scale: [ 1, 1, 1]
    children:
      parent1:
        extends: http://vwf.example.com/node3.vwf
        properties:
          translation: [ 2.310, 1.168, 4.610 ]
          rotation: [ 1, 0, 0, 90 ]
          scale: [ 2, 2, 2 ]
        children:
          cube1:
            extends: http://vwf.example.com/node3.vwf
            source: OrientationCube.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 0, 0, 0 ]
              rotation: [ 0, 1, 0, 90 ]
              scale: [ 0.5, 0.5, 0.5 ]
  grandparent2:
    extends: http://vwf.example.com/node3.vwf
    properties:
      translation: [ 0, 0, 1 ]
      rotation: [ 1, 0, 0, 180 ]
      scale: [ 0.1, 0.1, 0.1 ]
    children:
      parent2:
        extends: http://vwf.example.com/node3.vwf
        properties:
          translation: [ 1, 0, 0 ]
          rotation: [ 1, 0, 0, 270 ]
          scale: [ 1, 1, 1 ]
        children:
          cube2:
            extends: http://vwf.example.com/node3.vwf
            source: OrientationCube.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 1, 1, 0 ]
              rotation: [ 0, 1, 0, 180 ]
              scale: [ 1, 1, 1 ]
  grandparent3:
    extends: http://vwf.example.com/node3.vwf
    properties:
      translation: [ 0, 0, 1 ]
      rotation: [ 1, 1, 0, 90 ]
      scale: [ 1, 1, 1 ]
    children:
      parent3:
        extends: http://vwf.example.com/node3.vwf
        properties:
          translation: [ 1, 0, 1 ]
          rotation: [ 1, 0, 1, 90 ]
          scale: [ 1, 1, 1 ]
        children:
          cube3:
            extends: http://vwf.example.com/node3.vwf
            source: OrientationCubeYUp.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 1, 1, 1 ]
              rotation: [ 1, 1, 1, 180 ]
              scale: [ 1, 1, 1 ]
  grandparent4:
    extends: http://vwf.example.com/node3.vwf
    properties:
      translation: [ -1, 0, 0 ]
      rotation: [ 1, 1, 0, 270 ]
      scale: [ 1, 1, 1 ]
    children:
      parent4:
        extends: http://vwf.example.com/node3.vwf
        properties:
          translation: [ 0, 0, -1 ]
          rotation: [ 1, 1, 1, 270 ]
          scale: [ 1, 1, 1 ]
        children:
          cube4:
            extends: http://vwf.example.com/node3.vwf
            source: OrientationCubeYUp.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 0, -1, 0 ]
              rotation: [ 1, 0, 1, 180 ]
              scale: [ 1, 1, 1 ]
scripts:
- |
  this.initialize = function() {
    this.camera.transform = [  -0.834, -0.550, 0,     0,
                                0.550, -0.834, 0,     0,
                                0,      0,     1,     0,
                               -7.478, 20.066, 2.690, 1]
    
    // Perform transforms that will get all cubes back to an identity tranform.  Matrix math for the following was
    // computed using these sites:
    // Multiplication: http://www.bluebit.gr/matrix-calculator/matrix_multiplication.aspx
    // Inverse: http://www.jimmysie.com/maths/matrixinv.php

    // Cube 1
    // Grandparent transform: [1,0,0,0,0,1,0,0,0,0,1,0,3.0969998836517334,7.633999824523926,0.09000000357627869,1]
    // Parent transform: [2,0,0,0,0,6.845709066283234e-8,2,0,0,-2,6.845709066283234e-8,0,2.309999942779541,1.1679999828338623,4.610000133514404,1]
    // Parent world transform:
    //   2.000  0.000  0.000  5.407
    //   0.000  0.000 -2.000  8.802
    //   0.000  2.000  0.000  4.700
    //   0.000  0.000  0.000  1.000
    // Inverse of parent world tranform:
    //   0.5  0   0   -2.7035
    //   0    0   0.5 -2.35
    //   0   -0.5 0    4.401
    //   0    0   0    1
    // Cube transform: [1.7114272665708086e-8,0,-0.5,0,0,0.5,0,0,0.5,0,1.7114272665708086e-8,0,0,0,0,1]
    // Inverse cube transform:
    //   0  0 -2  0
    //   0  2  0  0
    //   2  0  0  0
    //   0  0  0  1
    // Tnew = inv(parentWorld) * inv(cubeTransform)
    //
    // For check:
    // New cube transform:

    var cube1 = this.grandparent1.parent1.cube1;
    cube1.transformBy( [ 0, 1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -2.704, -2.350, 4.401, 1 ], 3 );

    // Cube 2
    // Grandparent transform: [0.10000000149011612,0,0,0,0,-0.10000000149011612,1.2246063207351528e-17,0,0,-1.2246063207351528e-17,-0.10000000149011612,0,0,0,1,1]
    // Parent transform: [1,0,0,0,0,3.422854533141617e-8,-1,0,0,1,3.422854533141617e-8,0,1,0,0,1]
    // Parent world transform:
    //   0.100  0.000  0.000  0.100
    //   0.000  0.000 -0.100  0.000
    //   0.000  0.100  0.000  1.000
    //   0.000  0.000  0.000  1.000
    // Inverse parent world transform:
    //   10   0  0  -1
    //   0    0 10 -10
    //   0  -10  0   0
    //   0    0  0   1

    var cube2 = this.grandparent2.parent2.cube2;
    cube2.transformTo( [ 10, 0, 0, 0, 0, 0, -10, 0, 0, 10, 0, 0, -1, -10, 0, 1 ], 3 );
    
    // Cube 3
    // Grandparent transform: [0.5,0.5,-0.7071067690849304,0,0.5,0.5,0.7071067690849304,0,0.7071067690849304,-0.7071067690849304,0,0,0,0,1,1]
    // Parent transform: [0.5,0.7071067690849304,0.5,0,-0.7071067690849304,0,0.7071067690849304,0,0.5,-0.7071067690849304,0.5,0,1,0,1,1]
    // Parent world transform:
    //   0.957  0.146  0.250  1.207
    //   0.250 -0.854 -0.457 -0.207
    //   0.146  0.500 -0.854  0.293
    //   0.000  0.000  0.000  1.000
    // Cube transform: [-0.3333333134651184,0.6666666865348816,0.6666666865348816,0,0.6666666865348816,-0.3333333134651184,0.6666666865348816,0,0.6666666865348816,0.6666666865348816,-0.3333333134651184,0,1,1,1,1]
    // Cube world transform:
    //   -0.055  0.756  0.652  2.560
    //   -0.957  0.147 -0.250 -1.268
    //   -0.285 -0.639  0.715  0.085
    //    0.000  0.000  0.000  1.000
    // Inverse world transform:
    //   -0.0546343030952 -0.956980631805 -0.284788241026 -1.05129458598
    //    0.755357107876   0.146466323212 -0.63758916578  -1.69350688659
    //    0.65329009168   -0.250555943401  0.715266957167 -2.05142637418
    //    0                0               0               1

    var cube3 = this.grandparent3.parent3.cube3;
    cube3.worldTransformBy( [ 
      -0.055, 0.755, 0.653, 0, -0.957, 0.147, -0.251, 0, -0.285, -0.637, 0.715, 0, -1.051, -1.694, -2.051, 1
    ], 3 );
    
    var cube4 = this.grandparent4.parent4.cube4;
    cube4.worldTransformTo( [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ], 3 );

    // Output test case results
    //this.log = function() {
    //  this.logger.info( "These should all be identity matrices:" );
    //  this.logger.info( "Cube 1 world transform:" );
    //  this.printWorldTransform( cube1 );
    //  this.logger.info( "Cube 2 world transform:" );
    //  this.printWorldTransform( cube2 );
    //  this.logger.info( "Cube 3 world transform:" );
    //  this.printWorldTransform( cube3 );
    //  this.logger.info( "Cube 4 world transform:" );
    //  this.printWorldTransform( cube4 );
    //}
    
    //this.in( 4 ).log();

    this.toleranceTest = function() {
      var self = this;
      var transformByTestCube = cube1;
      var transformToTestCube = cube2;
      var worldTransformByTestCube = cube3;
      var worldTransformToTestCube = cube4;
      
      this.logger.info("Four passed tests should log to the console after a 5 second delay.");
      testWorldTransformTolerance.call(self, transformByTestCube, "transformBy" );
      testWorldTransformTolerance.call(self, transformToTestCube, "transformTo" );
      testWorldTransformTolerance.call(self, worldTransformByTestCube, "worldTransformBy" );
      testWorldTransformTolerance.call(self, worldTransformToTestCube, "worldTransformTo" );
    }
 
    this.in( 5 ).toleranceTest();
  } 

  this.printWorldTransform = function( node3 ) {
    if ( !node3 ) {
      this.logger.error( "node3 is not valid - cannot print transform");
      return;
    }
    var trans = node3.worldTransform;
    if ( trans.length >= 16 ) {
      this.logger.info( "  " + trans[ 0 ] + " " + trans[ 4 ] + " " + trans[ 8 ]  + " " + trans[ 12 ] );
      this.logger.info( "  " + trans[ 1 ] + " " + trans[ 5 ] + " " + trans[ 9 ]  + " " + trans[ 13 ] );
      this.logger.info( "  " + trans[ 2 ] + " " + trans[ 6 ] + " " + trans[ 10 ] + " " + trans[ 14 ] );
      this.logger.info( "  " + trans[ 3 ] + " " + trans[ 7 ] + " " + trans[ 11 ] + " " + trans[ 15 ] );
    }
    else
      this.logger.error( "node3.worldTransform is not valid - cannot print" );
  }

  function testWorldTransformTolerance( node, testName ) {
    
    if ( !node || node.worldTransform.length !== 16 ) {
      this.logger.error( "node is not valid - cannot test delta tolerance");
      return;
    }
    
    var tolerance = 0.01;
    var testMatrix = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];
    var trans = node.worldTransform;
    
    for (var i = 0; i < trans.length; i++ ) {
      if (( Math.abs (trans[i] - testMatrix[i] )) > tolerance ) {
        this.logger.info("Test Failed. " + testName + " tolerance check is beyond " + tolerance + " bounds");
        return;
      } 
    }
    this.logger.info("Test Passed. " + testName + " is within " + tolerance + " tolerance.");
  }
   
