# Verify that event listener context node resolution is independent of the node load order. Fixed by
# commit b35c711: Record listener context as node IDs instead of node references.
# 
# 1. Load http://localhost:3000/test/listener-context-replication.
# 
# 2. Observe in the console:
# 
#   vwf.model.javascript#beta: from alpha to beta index.vwf:2-94-beta
#   vwf.model.javascript#alpha: from beta to alpha index.vwf:1-69-alpha
# 
# 3. Load a second client in the same instance.
# 
# 4. Execute: vwf_view.kernel.execute( "index.vwf", "this.fire()" )
# 
# 5. On both clients, observe in the console:
# 
#   vwf.model.javascript#beta: from alpha to beta index.vwf:2-94-beta
#   vwf.model.javascript#alpha: from beta to alpha index.vwf:1-69-alpha
# 
# Before commit b35c711, the listener on `alpha.event` in the late-joining client would not have a
# context node. This would cause the listener to run on the global root instead of on `beta`. The
# second client's console would show:
# 
#   vwf.model.javascript#0: from alpha to undefined 0
#   vwf.model.javascript#alpha: from beta to alpha index.vwf:1-40-alpha

---

methods:
  make: |
    this.children.create( "alpha", { events: { event: null } } );
    this.children.create( "beta", { events: { event: null } } );
  listen: |
    this.alpha.event = this.beta.events.add( function() { this.logger.info( "from alpha to", this.name, this.id ) }, this.beta );
    this.beta.event = this.alpha.events.add( function() { this.logger.info( "from beta to", this.name, this.id ) }, this.alpha );
  fire: |
    this.alpha.event();
    this.beta.event();

scripts: |
  this.future(0).make();
  this.future(0).listen();
  this.future(1).fire();
