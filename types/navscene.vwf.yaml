--- 
extends: http://vwf.example.com/types/scene
properties: 
  navmode:
    set: |
      switch ( value ) {
        case "walk":
        case "orbit":
          this.navmode = value;
          break;
      }
    value: "walk"  
events:
  # TODO: remove, and use node2's pointer events when they're ready
  mouseDown:
  mouseUp:
  mouseMove:
  mouseOver:
  mouseEnter:
  mouseLeave:
  mouseHover:
  mouseWheel:
scripts:
- text: |
    var pointerDown = false;
    var counter = 1;
    this.mouseDown = function( parms ){
      pointerDown = true;
    }
    this.mouseUp = function( parms ){
      pointerDown = false;
    }
    this.mouseMove = function( parms ){
      if ( pointerDown && parms.mouseEventTime - parms.mouseDownTime > 600 ) {
        this.mouseLook( parms );
      }    
    }
    this.mouseOver = function( parms ){ }
    this.mouseEnter = function( parms ){ }
    this.mouseLeave = function( parms ){ }
    this.mouseHover = function( parms ){ }
    this.handleKeyEvents = function( keyMap, now, lasttime, mat, trans, mag ) {
      if (!this.activeCameraComp) {
        this.getActiveCamera();
      }
      if ( this.activeCameraComp ) {
        var speed = 1.0;
        var camerapos = this.activeCameraComp.position;
        var camerarot = this.activeCameraComp.rotation;
        var yinc = 0;
        var xinc = 0;
        var zinc = 0;
        var yRot = 0;        
        if ( mag == 0 ) mag = 1; 
        trans[0] = trans[0] / mag;
        trans[1] = trans[1] / mag;
        if ( this.activeCameraComp && this.activeCameraComp.speed )
          speed = Number( this.activeCameraComp.speed );
        for ( keyPress in keyMap.keys ) {
          switch ( Number( keyPress ) ) {
            case 87:  //w
            case 38:  //up
              yinc = yinc + parseFloat(trans[1]); xinc = xinc + parseFloat(trans[0]);
              break;
            case 83:  //s
            case 40:  //down
              yinc = yinc - parseFloat(trans[1]); xinc = xinc - parseFloat(trans[0]);
              break;
            case 65:  //a
              yinc = yinc + parseFloat(trans[0]); xinc = xinc - parseFloat(trans[1]);
              break;
            case 68:  //d
              yinc = yinc - parseFloat(trans[0]); xinc = xinc + parseFloat(trans[1]);
              break;
            case 37: // left
            case 81: // q
              yRot += 0.04;
              break;
            case 39: // right
            case 69: // e
              yRot -= 0.04;
              break;
            case 90: // z
              console.info( "position: " + camerapos );
              console.info( "rotation: " + camerarot );
              break;
            case 88: // x
              break;
            case 82: // r
              zinc = zinc + 1.0;
              break;
            case 67: // c
              zinc = zinc - 1.0;
              break;
            default:
              break;
          }
        }
        if ( yRot != 0 ) {
          this.activeCameraComp.rotation = [ camerarot[0], camerarot[1] + yRot, camerarot[2] ];
        }
        if (xinc != 0 || yinc != 0 || zinc != 0) {
          this.activeCameraComp.position = [ camerapos[0] + xinc*speed, camerapos[1] + yinc*speed, camerapos[2] + zinc*speed ];
        }
      }
    }
    this.mouseLook = function( parms ) {
      if (!this.activeCameraComp) this.getActiveCamera();
      if ( this.activeCameraComp ) {
        var rot = this.activeCameraComp.rotation;
        var viewCenter = [ 400, 300 ];
        var incX = -( viewCenter[1] - parms.Y ) * 0.001;
        var incY = ( viewCenter[0] - parms.X ) * 0.0002;
        //console.info( "X = " + parms.X + "    Y = " + parms.Y + "   incX = " + incX + "    incY = " + incY );

        if ( parms.mag == 0 ) parms.mag = 1;
        parms.trans[0] = parms.trans[0] / parms.mag;
        parms.trans[1] = parms.trans[1] / parms.mag;
        
        this.activeCameraComp.rotation = [ 1.56 - parms.trans[1] * incX, rot[1] + incY, -parms.trans[0] * incX ];
      }
    }
  type: application/javascript
  