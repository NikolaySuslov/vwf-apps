--- 
extends: |
  http://vwf.example.com/types/node3
properties:
  spin-rate: 1
  spin-axis: [ 0, 0, 1 ]
  spin-inputDim: "x"
  spin-min: 0
  spin-max: 1
  spin-value:
    set: |
      if ( value >= this["spin-min"] && value <= this["spin-max"] ) {
        this[ "spin-value" ] = value;
        this.setRotation( value * 360.0 )
        this.valueChanged( value );        
        console.info( value );
      }
events:
  valueChanged:
methods:
  initialize:
  spin:
  setRotation:
scripts:
- |
  
  this.initialize = function() {
    console.info( "== initialize == spin-on-move == initialize == " );
    this.input = {
      "pointerInfo": undefined,
      "pickInfo": undefined,
      "previous": {
        "pointerInfo": undefined,
        "pickInfo": undefined,        
      },
      pointerDown: {
        "pointerInfo": undefined,
        "pickInfo": undefined,        
      },
      update: function( pointerInfo, pickInfo ){
        this.previous.pointerInfo = this.pointerInfo;
        this.previous.pickInfo = this.pickInfo;
        this.pointerInfo = pointerInfo;
        this.pickInfo = pickInfo;
      }, 
      clear: function(){
        this.previous.pointerInfo = undefined;
        this.previous.pickInfo = undefined;
        this.pointerInfo = undefined;
        this.pickInfo = undefined;        
      },
      change: function() {
        var ret = [ 0, 0 ]
        if ( this.pointerInfo && this.previous.pointerInfo ) {
          ret[0] = this.pointerInfo.position[0] - this.previous.pointerInfo.position[0];
          ret[1] = this.pointerInfo.position[1] - this.previous.pointerInfo.position[1];          
        }
        return ret;
      }
    };
  }
  this.pointerDown = function( pointerInfo, pickInfo ) {
    if ( !this.input ) { this.initialize(); }

    this.input.pointerDown.pointerInfo = pointerInfo;
    this.input.pointerDown.pointerInfo = pickInfo;
    this.input.clear();
  }
  this.pointerUp = function( pointerInfo, pickInfo ) {
    this.input.clear();
  }
  this.pointerMove = function( pointerInfo, pickInfo ) {
    this.input.update( pointerInfo, pickInfo );
    var diff = this.input.change();
    switch( this["spin-inputDim"] ) {
      case "x":
        this.spin( diff[0] );
        break;
      case "y":
        this.spin( diff[1] );
        break;
    }
  }
  this.spin = function( value ){
    console.info( "this.spin( "+value+" )" );
    var rotation = this.rotation;
    var orientation = this.orientation;
    console.info( "       rotation = " + rotation );
    console.info( "       orientation = " + orientation );
    console.info( "       2 * Math.PI * value = " + (2 * Math.PI * value) );
    var newRot =[  
      rotation[0] + this["spin-axis"][0] * 2 * Math.PI * value * this["spin-rate"],
      rotation[1] + this["spin-axis"][1] * 2 * Math.PI * value * this["spin-rate"],
      rotation[2] + this["spin-axis"][2] * 2 * Math.PI * value * this["spin-rate"],
    ]; 
    console.info( "       newRot = " + newRot );
    console.info( "       (this[spin-axis][0] * newRot[0]) = " + (this["spin-axis"][0] * newRot[0]) );
    console.info( "       (this[spin-axis][1] * newRot[1]) = " + (this["spin-axis"][1] * newRot[1]) );
    console.info( "       (this[spin-axis][2] * newRot[2]) = " + (this["spin-axis"][2] * newRot[2]) );
    var rotationDegrees = ((this["spin-axis"][0] * newRot[0]) + (this["spin-axis"][1] * newRot[1]) + (this["spin-axis"][2] * newRot[2])) * 180/ Math.PI; 
    var rotationPercent = rotationDegrees / 360;

    console.info( "       rotationDegrees = " + rotationDegrees );
    console.info( "       rotationPercent = " + rotationPercent );
    
    if ( rotationPercent >= this["spin-min"] && rotationPercent <= this["spin-max"] ) {
      this["spin-value"] = rotationPercent;         
    }      
  }
  this.setRotation = function( value ) {
    var rotation = this.rotation;
    this.rotation =[  
      rotation[0] + this["spin-axis"][0] * value,
      rotation[1] + this["spin-axis"][1] * value,
      rotation[2] + this["spin-axis"][2] * value,
    ];     
  }

