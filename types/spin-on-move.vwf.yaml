--- 
extends: |
  http://vwf.example.com/types/node3
properties:
  spin-rate: 1
  spin-axis: [ 0, 0, 1 ]
  spin-inputDim: "x"
  spin-value: 0
events:
  valueChanged:
scripts:
- |
  this.initialize = function() {
    this.input = {
      "pointerInfo": undefined,
      "pickInfo": undefined,
      "previous": {
        "pointerInfo": undefined,
        "pickInfo": undefined,        
      },
      pointerDown: {
        "pointerInfo": undefined,
        "pickInfo": undefined,        
      },
      update: function( pointerInfo, pickInfo ){
        this.previous.pointerInfo = this.pointerInfo;
        this.previous.pickInfo = this.pickInfo;
        this.pointerInfo = pointerInfo;
        this.pickInfo = pickInfo;
      }, 
      clear: function(){
        this.previous.pointerInfo = undefined;
        this.previous.pickInfo = undefined;
        this.pointerInfo = undefined;
        this.pickInfo = undefined;        
      },
      change: function() {
        var ret = [ 0, 0 ]
        if ( this.pointerInfo && this.previous.pointerInfo ) {
          ret[0] = this.pointerInfo.position[0] - this.previous.pointerInfo.position[0];
          ret[1] = this.pointerInfo.position[1] - this.previous.pointerInfo.position[1];          
        }
        return ret;
      }
    };
  }
  this.pointerDown = function( pointerInfo, pickInfo ) {
    this.input.pointerDown.pointerInfo = pointerInfo;
    this.input.pointerDown.pointerInfo = pickInfo;
    this.input.clear();
  }
  this.pointerUp = function( pointerInfo, pickInfo ) {
    this.input.clear();
  }
  this.pointerMove = function( pointerInfo, pickInfo ) {
    this.input.update( pointerInfo, pickInfo );
    var diff = this.input.change();
    switch( this["spin-inputDim"] ) {
      case "x":
        this.spin( diff[0] );
        break;
      case "y":
        this.spin( diff[1] );
        break;
    }
  }
  this.spin = function( value ){
      var rotation = this.rotation;
      var newRot =[  
        rotation[0] + this["spin-axis"][0] * 2 * Math.PI * value * this["spin-rate"],
        rotation[1] + this["spin-axis"][1] * 2 * Math.PI * value * this["spin-rate"],
        rotation[2] + this["spin-axis"][2] * 2 * Math.PI * value * this["spin-rate"],
      ];  
      this.rotation = newRot;
      this["spin-value"] = (this["spin-axis"][0] * newRot[0]) + (this["spin-axis"][1] * newRot[1]) + (this["spin-axis"][2] * newRot[2]);  
  }

