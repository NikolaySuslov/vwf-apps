# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

---
extends: http://vwf.example.com/scene.vwf
properties:

  ## The size of the VWF world
  ## 
  ## @name appscene.vwf#worldSize
  ## @property

  worldSize: 137472

  ## The size of the collision map image in pixels
  ## 
  ## @name appscene.vwf#collisionMapSize
  ## @property

  collisionMapSize: 525

  ## World size / collision map size
  ## 
  ## @name appscene.vwf#collisionMapScaleFactor
  ## @property

  collisionMapScaleFactor: 262

  ## The relative path to the image used for the collision map
  ## 
  ## @name appscene.vwf#collisionMapPath
  ## @property

  collisionMapPath: images/bzworldcollisionmap.png

methods:
  update: 
  findPlayers:
  findPlayerByName: 
  findUnusedLaser:
  project:
  overlaps:
scripts:
- |
  var collisionMapCanvas, collisionMapContext, collisionMapImageData;

  this.generateAxesForCorners = function( corners ) {
    var result = [];
    for ( var index = 0; index < corners.length; index++ ) {
      var edgeNormal = [ -( corners[ ( index + 1 ) % corners.length ][ 1 ] - corners[ index ][ 1 ] ), corners[ ( index + 1 ) % corners.length ][ 0 ] - corners[ index ][ 0 ] ];
      result.push( edgeNormal );
    }
    return result;
  };
  
  this.generateBoundsForCorners = function( corners ) {
    var result = { };
    var minX, maxX, minY, maxY;
    result[ 'minX' ] = corners[ 0 ][ 0 ];
    result[ 'maxX' ] = result[ 'minX' ];
    result[ 'minY' ] = corners[ 0 ][ 1 ];
    result[ 'maxY' ] = result[ 'minY' ];
    for ( var index = 1; index < corners.length; index++ ) {
      if ( corners[ index ][ 0 ] > result[ 'maxX' ] ) {
        result[ 'maxX' ] = corners[ index ][ 0 ];
      }
      else if ( corners[ index ][ 0 ] < result[ 'minX' ] ) {
        result[ 'minX' ] = corners[ index ][ 0 ];
      }
      if ( corners[ index ][ 1 ] > result[ 'maxY' ] ) {
        result[ 'maxY' ] = corners[ index ][ 1 ];
      }
      else if ( corners[ index ][ 1 ] < result[ 'minY' ] ) {
        result[ 'minY' ] = corners[ index ][ 1 ];
      }
    }
    return result;
  };
  
  this.initialize = function() {
    collisionMapCanvas = document.createElement('canvas');
    collisionMapCanvas.width = this.collisionMapSize;
    collisionMapCanvas.height = this.collisionMapSize;
    collisionMapContext = collisionMapCanvas.getContext("2d");
    var collisionMapImage = new Image();
    collisionMapImage.onload = function() {
        collisionMapContext.drawImage(collisionMapImage, 0, 0);
        collisionMapImageData = collisionMapContext.getImageData(0, 0, collisionMapCanvas.width, collisionMapCanvas.height);
    }
    collisionMapImage.src = this.collisionMapPath;


    this.collisionInfo = [{'corners':[[-6069.52,-59961.06],[-1483.43,-68174.26],[6736.41,-63564.52],[2123.28,-55346.19]]}, {'corners':[[6074.56,-55671.97],[15033.83,-58541.32],[12169.30,-67518.27],[3185.78,-64634.08]]}, {'corners':[[21623.05751066182,-43618.24235152037],[27745.007166250783,-36437.27690964119],[20569.011348797143,-30304.190004620625],[14435.115704808883,-37485.24123898926]]}, {'corners':[[-23545.471068443654,-37735.63225271915],[-27410.633696172164,-29116.665433016202],[-36032.26242576948,-32982.88756468927],[-32164.793982562613,-41602.68015080926]]}, {'corners':[[-42645.0770378241,-28461.13079690683],[-34322.01318980434,-32934.02742899392],[-29854.98168030616,-24609.362219862465],[-38177.41125755651,-20140.669000847232]]}, {'corners':[[8123.8740799696825,-22998.14619225464],[6994.635458179336,-13622.380970397255],[-2382.8917822612716,-14748.572561291698],[-1257.3612518434459,-24126.22771311342]]}, {'corners':[[20156.499350907397,-6082.359548647963],[16860.302493333314,2772.8784932362696],[8005.944306608209,-523.5193779032296],[11301.708958364241,-9377.834341733502]]}, {'corners':[[-55159.13775105275,-6676.705759239291],[-57159.094961375966,2558.034838149697],[-66391.62492208675,556.6489640818318],[-64389.96031371964,-8676.286187988986]]}, {'corners':[[-48040.13732451069,380.6862222189784],[-39051.67270539792,3284.268985640567],[-41954.512383368135,12272.849859380605],[-50944.408589528284,9369.11838130647]]}, {'corners':[[8005.81852008532,-524.8462715834655],[11300.775067397135,-9375.325850237057],[20154.945949438195,-6082.937864384448],[16861.248010584244,2770.8571658627684]]}, {'corners':[[46149.18265891014,-8444.84375945196],[45475.11997160356,-17542.58913904331],[54893.77951310483,-18243.71514907265],[55595.8280017649,-8823.893159755027]]}, {'corners':[[-49484.58,-56432.46],[-51827.99,-57452.68],[-50822.24,-59807.76],[-48469.87,-58791.41]]}, {'corners':[[-37180.25,-58124.75],[-35243.98,-59785.19],[-33570.82,-57839.89],[-35517.57,-56165.63]]}, {'corners':[[30794.47202786377,-44303.991924479626],[28226.97801963663,-44121.498609417526],[28047.796912974736,-46687.5127437195],[30618.72421313539,-46872.25614061754]]}, {'corners':[[-28065.228734909204,-27521.977782544785],[-26216.665169691572,-29312.610851772606],[-24426.662505415832,-27461.3900511254],[-26277.82219418205,-25668.981606213558]]}, {'corners':[[-20862.110157055948,-25960.263256635255],[-18683.032733197862,-27329.711021017287],[-17315.35551090102,-25150.728498909357],[-19493.283291861837,-23779.314471490325]]}, {'corners':[[27741.370296437937,-27673.75070061779],[29737.8077149638,-26056.945451378597],[28122.490630721528,-24058.52549929138],[26121.970224580444,-25675.539820438535]]}, {'corners':[[-35403.557422924154,-13614.18126950289],[-36839.06261552544,-11485.417432449483],[-38975.41425239103,-12919.742430557388],[-37535.75479688041,-15056.056980196556]]}, {'corners':[[-53299.47763092704,-11438.094816086312],[-53305.55522615576,-8861.81533029409],[-55877.09201451864,-8871.520214855504],[-55870.76183430619,-11447.199971631922]]}, {'corners':[[-51155.60336103129,444.0178591493653],[-49654.56213708724,-1648.7765485472346],[-47559.50857757511,-146.89915845315141],[-49064.37755851818,1942.7288545441538]]}, {'corners':[[-41859.191621541366,-4045.3240910472086],[-39404.708151446524,-4801.050866852597],[-38640.93601230701,-2342.3252806643363],[-41102.73806610415,-1581.9649462773395]]}, {'corners':[[25555.61479464588,-10309.420248068214],[24399.10469723812,-12606.401019940608],[26697.651372941757,-13762.884360953998],[27857.57676633886,-11462.921981575913]]}, {'corners':[[16465.793641184468,-12865.453480833028],[14875.315657840976,-14890.344012567757],[16897.206011113845,-16482.312966894955],[18490.32036963057,-14456.553662127975]]}, {'corners':[[44184.60,-58808.05],[44356.59,-58757.88],[45008.66,-60764.34],[44845.66,-60817.63]]}, {'corners':[[58071.34427094716,-58544.20064613499],[58244.01210679933,-58544.278971265165],[58247.67490388064,-56435.46431017664],[58074.697215257314,-56427.64229799266]]}, {'corners':[[48106.90488343808,-40415.04777917137],[47976.08985165462,-40300.85043049542],[46583.742784153605,-41894.90261288092],[46714.10681138267,-42008.77977117203]]}, {'corners':[[-19149.048654391318,-39225.848884151914],[-19017.701095805773,-39123.6854792967],[-20311.611005171144,-37448.69612777481],[-20446.61944441655,-37553.7190702795]]}, {'corners':[[24339.424502563048,-21295.688775838884],[24315.415609148135,-21125.225634572816],[22224.99015618354,-21417.542777568095],[22243.275722712082,-21588.758819223272]]}, {'corners':[[11370.628918134274,-18095.94868074082],[11382.60122456159,-17922.769524033934],[9271.13304280258,-17776.395169023435],[9259.157717935019,-17949.621925303047]]}, {'corners':[[-44686.68886470289,-11618.023973833186],[-44692.79362116624,-11444.463778397458],[-46781.41743650059,-11514.700133818165],[-46801.98565994947,-11689.931317343724]]}, {'corners':[[-49388.922944875936,-12997.182039582603],[-49525.90466459268,-12894.154216466794],[-50799.10086334889,-14584.888981845166],[-50660.4966998866,-14689.141023707954]]}, {'corners':[[-37273.46574156958,236.05064045708056],[-37253.39879421113,408.0427969045053],[-39355.64240873245,653.5346016515819],[-39375.48998623852,483.4229988526557]]}, {'corners':[[28605.838044111955,2723.7025569871503],[28759.211702648387,2804.235216423337],[27778.892031354288,4675.16797009078],[27621.69644788521,4595.151918802922]]}, {'corners':[[-12281.113023014803,12052.358136728288],[-21060.526462252798,15545.499732258004],[-17567.384488255695,24324.90806784803],[-8787.971810298477,20831.75972638589]]}, {'corners':[[-14024.901970783256,8750.390631863609],[-14166.084978191187,8644.670648072599],[-15434.719418412384,10338.855223324648],[-15293.520494292496,10444.555293047679]]}, {'corners':[[-7316.917938163429,61540.958952591995],[-8012.466471939045,59053.72249389468],[-10499.70639067501,59749.28300217353],[-9804.163910419975,62236.51675017651]]}, {'corners':[[-8843.359730782387,43556.71234542144],[-6524.110844681872,42420.35779615607],[-7660.459917313053,40101.085908574685],[-9979.706412174577,41237.44350541945]]}, {'corners':[[6106.549004857969,29700.483439085987],[7306.528359562792,27413.51296901293],[5019.556694182958,26213.53074401802],[3819.5787370507346,28500.519284346643]]}, {'corners':[[-42668.59510743426,49512.018571869674],[-42586.591417038115,58958.97857103935],[-33141.15195015692,58877.068361510755],[-33221.081348037376,49429.86628337534]]}, {'corners':[[-39821.75475749431,21191.82164470031],[-46877.10528118977,14907.277856789371],[-53161.62720330214,21963.10558174159],[-46105.78052849883,28247.556137043674]]}, {'corners':[[-16303.877708834101,59002.80355365088],[-10229.584978873918,51765.3078418696],[-17467.154752279414,45691.13537238435],[-23541.13268203943,52928.68004081808]]}, {'corners':[[27648.270886331968,16529.908628841167],[27533.66480916818,7082.09448631683],[18085.633862851446,7196.94719529478],[18200.53814704209,16644.967054546174]]}, {'corners':[[49648.20161275692,52098.55821050559],[51065.13905849996,50526.34323640935],[51196.10745693073,50644.35263903965],[49779.194354472245,52216.63491126631]]}, {'corners':[[27347.309121412334,61149.119091203946],[28788.138867552487,63292.549140878495],[30931.549493227365,61851.71483602128],[29490.737087320133,59708.284451308406]]}, {'corners':[[52374.19933588422,15626.981644726608],[49984.845804681165,16607.369699493305],[50965.197401236495,18996.712885343226],[53354.55224565189,18016.346201113098]]}];
    for ( var index = 0; index < this.collisionInfo.length; index++ ) {
      this.collisionInfo[ index ][ 'bounds' ] = this.generateBoundsForCorners( this.collisionInfo[ index ][ 'corners' ] );
      this.collisionInfo[ index ][ 'axes' ] = this.generateAxesForCorners( this.collisionInfo[ index ][ 'corners' ] );
    }
  }

  this.dotProduct = function( vector1, vector2 ) {
    return ( vector1[0] * vector2[0] + vector1[1] * vector2[1]);
  };
  
  this.project = function( corners, axis ) {
    var min, max;
    min = this.dotProduct( corners[ 0 ], axis );
    max = min;
    for ( var index = 1; index < corners.length; index++ ) {
      var current = this.dotProduct( corners[ index ], axis );
      if ( current < min ) {
        min = current;
      }
      else if ( current > max ) {
        max = current;
      }
    }
    return [ min, max ];
  };

  this.overlaps = function( range1, range2 ) {
    if ( ( range1[0] > range2[1] ) || ( range1[1]  < range2[0] ) ) {
      return false;
    }
    return true;
  };
  
  this.collides = function( firstObject, secondObject ) {
    if ( ( firstObject[ 'bounds' ][ 'minY' ] > secondObject[ 'bounds' ][ 'maxY' ] ) || ( firstObject[ 'bounds' ][ 'maxY' ] < secondObject[ 'bounds' ][ 'minY' ] ) || ( firstObject[ 'bounds' ][ 'minX' ] > secondObject[ 'bounds' ][ 'maxX' ] ) || ( firstObject[ 'bounds' ][ 'maxX' ] < secondObject[ 'bounds' ][ 'minX' ] ) ) {
      return false;
    }
    for ( var index = 0; index < firstObject[ 'axes' ].length; index++ ) {
      var projection1 = this.project( firstObject[ 'corners' ], firstObject[ 'axes' ][ index ] );
      var projection2 = this.project( secondObject[ 'corners' ], firstObject[ 'axes' ][ index ] );
      if ( ! ( this.overlaps( projection1, projection2 ) ) ) {
        return false;
      }
    }
    for ( var index = 0; index < secondObject[ 'axes' ].length; index++ ) {
      var projection1 = this.project( firstObject[ 'corners' ], secondObject[ 'axes' ][ index ] );
      var projection2 = this.project( secondObject[ 'corners' ], secondObject[ 'axes' ][ index ] );
      if ( ! ( this.overlaps( projection1, projection2 ) ) ) {
        return false;
      }
    }
    return true;
  };

  this.collisionDetection = function( collisionInfoToTest, owner ) {
    if ( ( collisionInfoToTest[ 'bounds' ][ 'minY' ] < -62992 ) || ( collisionInfoToTest[ 'bounds' ][ 'maxY'] > 62992 ) || ( collisionInfoToTest[ 'bounds' ][ 'minX'] < -62964 ) || ( collisionInfoToTest[ 'bounds' ][ 'maxX'] > 62992 ) ) {
      return this.bz_world;
    }
    for ( var index = 0; index < this.collisionInfo.length; index++ ) {
      if ( this.collides( collisionInfoToTest, this.collisionInfo[ index ] ) ) {
        return this.bz_world;
      }
    }
    var players = this.findPlayers();
    for ( var index = 0; index < players.length; index++ ) {
      if ( players[ index ].id != owner ) {
        if ( players[ index ].active ) {
          if ( ! ( players[ index ].collisionInfo ) ) {
            players[ index ].collisionInfo = players[ index ].calculateCollisionInfo( 0, [ 0, 0 ] );
          }
          if ( this.collides( collisionInfoToTest, players[ index ].collisionInfo ) ) {
            return players[ index ];
          }
        }
      }
    }
    return false;
  };
  this.findPlayers = function() {
    return this.find("./element(*,'http://vwf.example.com/navigable.vwf')");
  }
  this.findPlayerByName = function(playerName) {
    var players = this.findPlayers();
    var playerObject = undefined;
    for(var i = 0, il = players.length; i < il; i++) {
      if(players[i].playerName == playerName) {
        playerObject = players[i];
        if ( players[i].playerConnected ) {
          break;
        }
      }
    }
    return playerObject;
  }
  this.findUnusedLaser = function() {
    var lasers = this.lasers.children;
    for(var i = 0; i < lasers.length; i++) {
      if ( lasers[i].enabled == false ) {
        return lasers[i];
      }
    }
    return undefined;
  }