# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/node3.vwf
source: Radio.DAE
type: model/vnd.collada+xml
properties:
  translation: [ 0, 0, 0 ]
  rotation: [ 1, 0, 0, -90 ]
  powerOn:
    set: |
      if ( this.powerOn != Boolean( value ) ){
        this.powerOn = Boolean( value );
        if ( value ) {
          this.volume = 10;
          this.menuMode = "channel";
        } else {
          this.volume = 0;
          this.Radio.LCD.material.texture = "images/lcd.png";
        } 
      } //@ sourceURL=radio.property.powerOn.index.vwf
    value: false
  volume:
    set: |
      if ( value >= 0 && value <= 10 ){
        if ( this.volume == 0 && value != 0 ) {
          this.powerOn = true;
        } else if ( this.volume != 0 && value == 0 ) {
          this.powerOn = false;
        }
        this.volume = value;
      } //@ sourceURL=radio.property.volume.index.vwf
    value: 0
  speak: "up"
  channel:
    set: |
      if ( !this.powerOn ) return;
      switch( value ) {
        case 0:
          this.Radio.LCD.material.texture = this.parent.channelImages[0];
          this.channel = value;
          break;
        case 1:
          this.Radio.LCD.material.texture = this.parent.channelImages[1];
          this.channel = value;
          break;
        case 2:
          this.Radio.LCD.material.texture = this.parent.channelImages[2];
          this.channel = value;
          break;
        case 3:
          this.Radio.LCD.material.texture = this.parent.channelImages[3];
          this.channel = value;
          break;
        case 4:
          this.Radio.LCD.material.texture = this.parent.channelImages[4];
          this.channel = value;
          break;
        case 5:
          this.Radio.LCD.material.texture = this.parent.channelImages[5];
          this.channel = value;
          break;
        case 6:
          this.Radio.LCD.material.texture = this.parent.channelImages[6];
          this.channel = value;
          break;
        case 7:
          this.Radio.LCD.material.texture = this.parent.channelImages[7];
          this.channel = value;
          break;
        case 8:
          this.Radio.LCD.material.texture = this.parent.channelImages[8];
          this.channel = value;
          break;
        case 9:
          this.Radio.LCD.material.texture = this.parent.channelImages[9];
          this.channel = value;
          break;
        case 10:
          this.Radio.LCD.material.texture = this.parent.channelImages[10];
          this.channel = value;
          break;
        case 11:
          this.Radio.LCD.material.texture = this.parent.channelImages[11];
          this.channel = value;
          break;
        case 12:
          this.Radio.LCD.material.texture = this.parent.channelImages[12];
          this.channel = value;
          break;
        case 13:
          this.Radio.LCD.material.texture = this.parent.channelImages[13];
          this.channel = value;
          break;
        case 14:
          this.Radio.LCD.material.texture = this.parent.channelImages[14];
          this.channel = value;
          break;
        case 15:
          this.Radio.LCD.material.texture = this.parent.channelImages[15];
          this.channel = value;
          break;
      }
    value: 0
  headphones: false
  antenna:
    set: |
      if ( value ) {
        this.Radio.playing = !value;
      } else {
        this.logger.debug( "replace the antenna" );
      }
      this.antenna = value;
    value: true
  battery: true
  batteryCover: true 
  beltClip: true
  menuMode:
    set: |
      if ( !this.powerOn ) return;
      switch( value ) {
        case "channel":
          this.channel = this.channel;
          this.menuMode = value;
          break;
        case "backLight":
          this.backLightMode = this.backLightMode;
          this.menuMode = value;
          break;
        case "squelch":
          this.squelch = this.squelch;
          this.menuMode = value;
          break;
        case "beep":
          this.beepOn = this.beepOn;
          this.menuMode = value;
          break;
      }
    value: "none"
  backLightMode:
    set: |
      if ( !this.powerOn ) return;
      switch(value) {
        case "auto":
          this.Radio.LCD.material.texture = this.parent.backlightImages[0];
          this.backLightMode = value;
          break;
        case "off":
          this.Radio.LCD.material.texture = this.parent.backlightImages[1];
          this.backLightMode = value;
          break;
        case "on":
          this.Radio.LCD.material.texture = this.parent.backlightImages[2];
          this.backLightMode = value;
          break;
      }
    value: "auto"
  beepOn:
    set: |
      if ( !this.powerOn ) return;
      if ( value ) {
          this.Radio.LCD.material.texture = this.parent.beepImages[0];
          this.beepOn = value;
      } else {
          this.Radio.LCD.material.texture = this.parent.beepImages[1];
          this.beepOn = value;
      }
    value: true
  squelch:
    set: |
      if ( !this.powerOn ) return;
      switch(value) {
        case 20:
          this.Radio.LCD.material.texture = this.parent.squelchImages[0];
          this.squelch = value;
          break;
        case 30:
          this.Radio.LCD.material.texture = this.parent.squelchImages[1];
          this.squelch = value;
          break;
        case 40:
          this.Radio.LCD.material.texture = this.parent.squelchImages[2];
          this.squelch = value;
          break;
        case 50:
          this.Radio.LCD.material.texture = this.parent.squelchImages[3];
          this.squelch = value;
          break;
        case 60:
          this.Radio.LCD.material.texture = this.parent.squelchImages[4];
          this.squelch = value;
          break;
        case 70:
          this.Radio.LCD.material.texture = this.parent.squelchImages[5];
          this.squelch = value;
          break;
        case 80:
          this.Radio.LCD.material.texture = this.parent.squelchImages[6];
          this.squelch = value;
          break;
        case 90:
          this.Radio.LCD.material.texture = this.parent.squelchImages[7];
          this.squelch = value;
          break;
        case 100:
          this.Radio.LCD.material.texture = this.parent.squelchImages[8];
          this.squelch = value;
          break;
        case 110:
          this.Radio.LCD.material.texture = this.parent.squelchImages[9];
          this.squelch = value;
          break;
      }
    value: 20
  encryptionOn:
    set: |
      if ( !this.powerOn ) return;
      if ( value ) {
        this.Radio.LCD.material.texture = this.parent.encryptImages[0];
          this.encryptionOn = value;
      } else { 
        this.Radio.LCD.material.texture = this.parent.encryptImages[1];
          this.encryptionOn = value;
      } 
      this.encryptionOn = value;
    value: false
  transmitPower:
    set: |
      if ( !this.powerOn ) return;
      switch ( value ){
        case 4:
          this.Radio.LCD.material.texture = this.parent.powerImages[0];
          this.transmitPower = value;
          break;
        case 2:
          this.Radio.LCD.material.texture = this.parent.powerImages[1];
          this.transmitPower = value;
          break;
        case 1:
          this.Radio.LCD.material.texture = this.parent.powerImages[2];
          this.transmitPower = value;
          break;
      }
    value: 4
  keysLocked: false
scripts: 
- |
    var radio = this;
    this.configSave = function(){
    }
    this.red = function() {
      if ( radio.keysLocked ) return;
      switch( radio.menuMode ) {
        case 'channel':
          radio.menuMode = 'backLight';
          break;
        case 'backLight':
          radio.menuMode = 'squelch';
          break;
        case 'squelch':
          radio.menuMode = "beep";
          break;
        case 'beep':
          radio.configSave();
          radio.menuMode = 'channel';
          break;
      }
    }
    this.up = function() {
      switch( radio.menuMode ) {
        case "backLight":
          if ( radio.backLightMode == "on" )
            radio.backLightMode = "auto";
          else if ( radio.backLightMode == "auto")
            radio.backLightMode = "off";
          else
            radio.backLightMode = "on";
          break;
        case "squelch":
          if ( radio.squelch <= 100 ) 
              radio.squelch = radio.squelch + 10;
          break;
        case "beep":
          radio.beepOn = !radio.beepOn;
          break;
      }
    }
    this.down = function() {
      switch( radio.menuMode ) {
        case "backLight":
          if ( radio.backLightMode == "on" )
            radio.backLightMode = "auto";
          else 
            radio.backLightMode = "on";
          break;
        case "squelch":
          if ( radio.squelch >= 30 )
              radio.squelch = radio.squelch - 10;
          break;
        case "beep":
          radio.beepOn = !radio.beepOn;
          break;
      }
    }
    this.p0 = function() {
      if ( radio.keysLocked ) return;
      switch( radio.menuMode ){
        case "channel":
          radio.encryptionOn = !radio.encryptionOn;
          break;
      }
    }
    this.p1 = function() {
      if ( radio.keysLocked ) return;
    }
    this.p2 = function() {
      if ( radio.keysLocked ) return;
      if ( radio.menuMode == "channel" ){
        if ( !radio.settingTransmitPower ){
          radio.settingTransmitPower = true;
        } else {
          switch ( radio.transmitPower ){
            case 4:
              radio.transmitPower = 2;
              break;
            case 2:
              radio.transmitPower = 1;
              break;
            case 1:
              radio.transmitPower = 4;
              break;
          }
        }
      }
    }
    this.p3 = function() {
      radio.keysLocked = !radio.keysLocked;
    }
    this.ptt = function() {
      if ( radio.keysLocked ) return;
    } //@ sourceURL=radio.base.index.vwf
children: 
  EnvironmentAmbientLight: 
    extends: http://vwf.example.com/node3.vwf 
  Radio: 
    extends: http://vwf.example.com/node3.vwf 
    properties: 
      playing: false
      looping: false
      speed: 1
    children: 
      ic40_MicrophonePort: 
        extends: http://vwf.example.com/node3.vwf 
      ic40_SpeakerPort: 
        extends: http://vwf.example.com/node3.vwf 
      ic40Channel: 
        extends: http://vwf.example.com/node3.vwf
        implements:
        - http://vwf.example.com/control-old.vwf
        properties: 
          controlType: rotate
          controlMode: continuous
          transformIncrement: -18
          transformAxis: [ 0, 1, 0 ]
          maxValue: 15
          dragSpeed: 20
        scripts:
        - |
            this.pointerUp = function( pointerInfo, pickInfo ) {
              this.parent.parent.channel = this.controlValue;
            }
            this.pointerMove = function( pointerInfo, pickInfo ) {
              this.parent.parent.channel = this.controlValue;
            }             
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40Down: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0.03, 0, 0 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.down();
            }            
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40Monitor: 
        extends: http://vwf.example.com/node3.vwf 
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40P0: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0, 0, 0.03 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.p0();
            }   
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40P1: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0, 0, 0.03 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.p1();
            }  
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40P2: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0, 0, 0.03 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.p2();
            }   
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40P3: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0, 0, 0.03 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.p3();
            }  
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40PTT: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0.04, 0, 0 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.ptt();
            }    
      ic40Red: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0, 0.02, 0 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.red();
            } //@ sourceURL=ic40Red.vwf  
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40Up: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          controlType: translate
          controlMode: momentary
          transformAxis: [ 0.04, 0, 0 ]
        scripts:
        - |
            this.pointerUp = function() {
              this.parent.parent.up();
            } //@ sourceURL=ic40Up.vwf 
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      ic40Volume: 
        extends: http://vwf.example.com/node3.vwf 
        implements:
        - http://vwf.example.com/control-old.vwf
        properties:
          rotation: [ 0, 0, 1, 0 ]
          controlType: rotate
          controlMode: positions
          transformIncrement: 12
          transformAxis: [ 0, 1, 0 ]
        methods:
          playStatic:
          stopStatic:
        scripts:  
        - | 
            this.pointerUp = function()  {
              if ( this.parent.parent.volume == 0 ) {
                this.parent.parent.volume = 1;
                this.playStatic();
              } else {
                this.parent.parent.volume = 0;
                this.stopStatic();
              }                            
            } //@ sourceURL=ic40Volume.vwf
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      LCD: 
        extends: http://vwf.example.com/node3.vwf 
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
            properties:
              texture: 
      LCD_Back: 
        extends: http://vwf.example.com/node3.vwf 
        children: 
          material: 
            extends: http://vwf.example.com/material.vwf 
      BeltClip_1: 
        extends: http://vwf.example.com/node3.vwf 
        properties: 
          playing: false
          looping: false
          speed: 1
        scripts:
        - |
            this.pointerUp = function() {
              this.playing = !this.playing 
            }    
        children: 
          BeltClip: 
            extends: http://vwf.example.com/node3.vwf 
          BeltClipBase: 
            extends: http://vwf.example.com/node3.vwf 
          BeltClip_Latch: 
            extends: http://vwf.example.com/node3.vwf 
            properties: 
              playing: false
              looping: false
              speed: 1
            scripts:
            - |
                this.pointerUp = function() {
                  this.playing = !this.playing 
                }   
            children: 
              BeltClipTab: 
                extends: http://vwf.example.com/node3.vwf 
      Battery: 
        extends: http://vwf.example.com/node3.vwf 
        properties: 
          playing: false
          looping: false
          speed: 1
        scripts:
        - |
            this.pointerUp = function() {
              this.playing = !this.playing 
            }  
        children: 
          ic40Battery: 
            extends: http://vwf.example.com/node3.vwf 
      BatteryLatch: 
        extends: http://vwf.example.com/node3.vwf 
        properties: 
          playing: false
          looping: false
          speed: 1
        scripts:
        - |
            this.pointerUp = function() {
              this.playing = !this.playing 
            }          
        children: 
          ic40BatteryLatch: 
            extends: http://vwf.example.com/node3.vwf 
            children: 
              material: 
                extends: http://vwf.example.com/material.vwf 
      ic40Radio: 
        extends: http://vwf.example.com/node3.vwf 
  ic40Antennae: 
    extends: http://vwf.example.com/node3.vwf 
    scripts:
    - |
        this.ic40Antennae = function() {
          this.parent.parent.antenna = !this.parent.parent.antenna; 
        }         
    children: 
      material: 
        extends: http://vwf.example.com/material.vwf 