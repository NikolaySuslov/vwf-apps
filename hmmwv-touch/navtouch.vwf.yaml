# Copyright 2013 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

## The component representation of a touch sensitive navigation scene
## 
## @name navtouch.vwf
## @namespace

--- 
extends: http://vwf.example.com/navscene.vwf
events:
  touchDrag:
  touchZoom:
scripts:
- |
    this.touchDrag = function( position ){
      console.info('touchDrag');
      this.input.pointerEventTime = this.time;

      var active = this.input.futureActive();
      var delta = this.input.pointerDelta();
      var valid = this.navmode == "none" ? false : true;
      if ( valid && !active ) {
        this.future( 0.1 ).update();
      }
      this.input.lastInputTime = this.time;   
    }
    this.touchZoom = function( scale, external ) {
      this.input.pointerEventTime = this.time;
      this.input.lastInputTime = this.time;

      if (!this.activeCameraComp) {
        this.getActiveCamera();
      }
      if ( this.activeCameraComp ) {
        var cameraPos = this.activeCameraComp.translation;
        var cameraAt = this.getCameraAt();

        if( !external || cameraPos[1] < -80 || scale == -1 )
        {
          if ( this.orbitRadius == -1 || this.input.pointerEventTime - this.input.lastUpdateTime > 0.5 ) {
            this.updateRadius();
          }

          cameraAt = goog.vec.Vec3.scale(
            cameraAt,
            scale,
            cameraAt
          );
          
          if ( goog.vec.Vec3.magnitudeSquared( cameraAt ) > goog.vec.EPSILON ) {
            this.activeCameraComp.translation = goog.vec.Vec3.add(
              this.activeCameraComp.translation,
              goog.vec.Vec3.scale(
                cameraAt,
                this.distance(),
                cameraAt
              ),
              cameraAt
            );
          }
        }
      }
    } //@ sourceURL=touchscene.vwf