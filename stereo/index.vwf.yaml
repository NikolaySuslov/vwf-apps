# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/scene.vwf
implements:
- http://vwf.example.com/threejs/fogExp2.vwf
properties:
  navmode: walk
  rotationSpeed: 2
  translationSpeed: 10
  fogexp_color: 0x000000
  fogexp_density: 0.0025
children:
  floor:
    extends: http://vwf.example.com/threejs/plane.vwf
    type: mesh/definition
    properties:
      meshDefinition: { "width": 1000, "height": 1000, "widthSegments": 100, "heightSegments": 100 }
      properties:
        translation: [ 0, 0, -0.5 ]
    children:
      material:
        extends: http://vwf.example.com/material.vwf
        type: material/definition
        properties:
          materialDefinition:
            type: MeshBasicMaterial
            side: 2
            texture: 
              url: 'images/checkerboard.jpg'
              repeat: [ 5, 5 ]
              wrapT: repeat
              wrapS: repeat
  hemi1:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "hemisphere"
      enable: true
      color: 0x777777
      intensity: 0.6
      groundColor: 0x000000
methods:
  initializeScene:
scripts:
- |
    this.initialize = function(){
      this.future(1.0).initializeScene();
    }
    this.initializeScene = function() {
        this.camera.translation = [ 0, 0, 10 ];
        //this.camera.translation = [ 0, -500, 100 ];
        this.camera.near = 1;  
        this.camera.far = 100000;

        var boxDef = function() {
          return {
            "extends": 'http://vwf.example.com/threejs/cube.vwf',
            "type": 'mesh/definition',
            "properties": {
              "meshDefinition": { 
                "width": 5, 
                "height": 5, 
                "depth": 5, 
                "widthSegments": 1, 
                "heightSegments": 1, 
                "depthSegments": 1 
              }, 
              "translation": [ 0, 0, 0 ]
            }
          }
        };

        var boxParent = {
          "extends": 'http://vwf.example.com/threejs/cube.vwf',
          "type": 'mesh/definition',
          "properties": {
            "meshDefinition": { 
              "width": 5, 
              "height": 5, 
              "depth": 5, 
              "widthSegments": 1,
              "heightSegments": 1, 
              "depthSegments": 1,
              "children": {} 
            }, 
            "translation": [ 0, 0, 0 ]
          },
          "children": {
            "material": {
              "extends": 'http://vwf.example.com/material.vwf',
              "type": 'material/definition',
              "properties": {
                "materialDefinition": {
                  "type": 'MeshBasicMaterial',
                  "side": 2,
                  "texture": 'images/UV_Grid_Sm.jpg'
                }
              }
            }
          }
        };

        var i, j, k;
        i = j = k = 0;
        var boxCount = 1; 
        var boxChild = boxParent.properties.meshDefinition.children;

        for( i = 0; i < 10; i++ ) {
            for( j = 0; j < 10; j++ ) {
                for( var k = 0; k < 10; k++ ) {
                    boxChild[ "box"+boxCount ] = boxDef();
                    boxChild[ "box"+boxCount ].type = "box";
                    boxChild[ "box"+boxCount ].properties.translation = [ 7+20*(5-i), 7+20*(5-j), 10+20*k ];
                    boxCount++;
                }
            }
        }

        this.children.create( "box", boxParent ); 
    }    
